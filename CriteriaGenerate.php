<?php
/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
include_once 'Criteria.php';
/**
 * Description of CriteriaGenerate
 *
 * @author edgar
 */
class CriteriaGenerate extends Criteria{
   
   private static $instancia;

   public static function instance()
   {
      if (  !self::$instancia instanceof self)
      {
         self::$instancia = new self;
      }
      return self::$instancia;
   }

   public function generateXML(){
        $tables = $this->getDatabaseTables();
        $file = CRITERIA_PATH_XML_PERSIST_GENERATED;        
        $route = CRITERIA_PATH_XML_CLASS_GENERATED;
        $writestring = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
        $writestring .= "<model>\n";
        foreach ($tables as $key => $table) {
            $writeclass ="<?php\n";
            $writeclass .="/*Clas autogenerated whith phpCriteria*/\n";
            $tableName = array_pop($table);
            $entityName = "Entity".ucwords($tableName);
            $writeclass .= "class ".$entityName." {\n\n";
            $writestring .= "\t<table name=\"".$tableName."\" class=\"".$entityName."\" >\n";
            $descTable[$tableName] = $this->getDescTable($tableName);
            foreach ($this->getDescTable($tableName) as $key_t => $column) {                
                $writeclass .= "\tpublic $".$column['Field'].";\n";
                $writestring .= "\t\t<column Field=\"".$column['Field']."\" Type=\"".$column['Type']."\" Null=\"".$column['Null']."\" Key=\"".$column['Key']."\" Default=\"".$column['Default']."\" Extra=\"".$column['Extra']."\" />\n";
            }
            $writestring .="\t</table>\n";
            $writeclass .= "\n\tfunction __construct() {}\n";
            $writeclass .= "}\n";
            $writeclass .= "?>";
            $this->escribirArchivo($route.$entityName.".php", $writeclass, true);
        }
        $writestring .= "</model>";
        $this->escribirArchivo($file, $writestring, true);

//        dpr($descTable);
   }

   private function escribirArchivo($file, $writestring, $create = false){        
        if (file_exists($file) || $create)
        {
            $handle = fopen($file, "w+");
            if (fwrite($handle, $writestring) === false) {
                throw new Exception("No se puede escribir en el archivo de la ruta ". $file);
            }
            fclose($handle);
        }else{
            throw new Exception("El archivo no exíste en la ruta ". $file);
        }        
   }
}
?>