<?php
/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
include_once 'Criteria.php';
/**
 * Description of CriteriaGenerate
 *
 * @author edgar
 */
class CriteriaGenerate extends Criteria{
   
   private static $instancia;

   /**
    *
    * @return <CriteriaGenerate>
    */
   public static function instance()
   {
      if (  !self::$instancia instanceof self)
      {
         self::$instancia = new self;
      }
      return self::$instancia;
   }

   public function generateEntity(){
        $tables = $this->getDatabaseTables();
        $file = CRITERIA_PATH_XML_PERSIST_GENERATED;
        $route = CRITERIA_PATH_XML_CLASS_GENERATED;
        foreach ($tables as $key => $table) {
            $writeclass ="<?php\n";
            $writeclass .="/* Class autogenerated whith PHPCriteria v1.1 */\n\n";
            $tableName = $table['Name'];
            $writeclass .="/**\n * @Entity(Table=\"$tableName\")\n*/\n";
            $entityName = "Entity".ucwords($tableName);
            $writeclass .= "class ".$entityName." {\n\n";
            $descTable[$tableName] = $this->getDescTable($tableName);
            foreach ($this->getDescTable($tableName) as $key_t => $column) {                
                $writeclass .= "\t/**\n";
                $writeclass .= "\t * @Column(Field=\"".$column['Field']."\",Type=\"".$column['Type']."\",Key=\"".$column['Key']."\",Null=\"".$column['Null']."\",Default=\"".$column['Default']."\",Extra=\"".$column['Extra']."\")\n\t*/\n";
                $writeclass .= "\tpublic $".$column['Field'].";\n\n";
            }
            $writeclass .= "\tfunction __construct() {}\n";
            $writeclass .= "}\n";
            $writeclass .= "?>";
            $this->escribirArchivo($route.$entityName.".php", $writeclass, true);
        }
   }

   public function findFKGenerateEntity($tableName){
        $tableCre = $this->showCreateTable($tableName);
        $txt = $tableCre[0]['Create Table'];
        //$lol = substr($txt, strpos($txt, "CONSTRAINT"), 100);
        $lol = substr($txt, strpos($txt, "CONSTRAINT"));
        //$lol = strpos($txt, "CONSTRAINT");
        //$lol = strcspn($txt, "KEY", null);


        dpr($lol);
        //dpr($lol2);
        //$lol = stream_get_line($tableCre[0]['Create Table'], 7);
        return ($txt);
   }

   private function escribirArchivo($file, $writestring, $create = false){        
        if (file_exists($file) || $create)
        {
            $handle = fopen($file, "w+");
            if (fwrite($handle, $writestring) === false) {
                throw new Exception("No se puede escribir en el archivo de la ruta ". $file);
            }
            fclose($handle);
        }else{
            throw new Exception("El archivo no exíste en la ruta ". $file);
        }        
   }
}
?>